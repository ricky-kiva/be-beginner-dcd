{
	"info": {
		"_postman_id": "9abd4214-1a79-443b-ae8e-0a3a887e2127",
		"name": "Notes App API",
		"description": "API Collection for for Notes app's Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26442482",
		"_collection_link": "https://www.postman.com/rickyslash/workspace/dcd-backend-development/collection/26442482-9abd4214-1a79-443b-ae8e-0a3a887e2127?action=share&source=collection_link&creator=26442482"
	},
	"item": [
		{
			"name": "[POST] Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code value is 201', () => {\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test('response Content-Type value is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('response body is object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body have correct property & value', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status')\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('message')\r",
							"    pm.expect(responseJson.message).to.equals('Note successfully added!')\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('data')\r",
							"    pm.expect(responseJson.data).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body noteId property is not empty', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    const { data } = responseJson\r",
							"\r",
							"    pm.expect(data).to.ownProperty('noteId')\r",
							"    pm.expect(data.noteId).to.not.equals('')\r",
							"\r",
							"    pm.environment.set('noteId', data.noteId)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Paranoid Android\",\r\n    \"tags\": [\"radiohead\", \"music\"],\r\n    \"body\": \"What's that? What's that?\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "[GET] All notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status value is 200', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response Content-Type value is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('response body is an object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body have correct property & value', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status')\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"    pm.expect(responseJson).to.have.ownProperty('data')\r",
							"    pm.expect(responseJson.data).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response data should have notes array & contain at least 1 item', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    const { data } = responseJson\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('notes')\r",
							"    pm.expect(data.notes).to.be.an('array')\r",
							"    pm.expect(data.notes).lengthOf.at.least(1)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "[GET] Note by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code value is 200', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response Content-Type header value is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('response body is an object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body have correct property & value', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status')\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"    pm.expect(responseJson).to.have.ownProperty('data')\r",
							"    pm.expect(responseJson.data).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body data contain note object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    const { data } = responseJson\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('note')\r",
							"    pm.expect(data.note).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('note object contains correct value for id, title, body, & tags property', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    const { data: { note } } = responseJson\r",
							"\r",
							"    const expectedId = pm.environment.get('noteId')\r",
							"    const expectedTitle = 'Paranoid Android'\r",
							"    const expectedTags = ['radiohead', 'music']\r",
							"    const expectedBody = \"What's that? What's that?\"\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('id')\r",
							"    pm.expect(note.id).to.equals(expectedId)\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('title')\r",
							"    pm.expect(note.title).to.equals(expectedTitle)\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('tags')\r",
							"    pm.expect(note.tags).to.eql(expectedTags)\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('body')\r",
							"    pm.expect(note.body).to.equals(expectedBody)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[PUT] Update note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code value is 200', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response Content-Type header value is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equal(\"application/json; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test('response body is an object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body have correct property & value', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status')\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"    pm.expect(responseJson).to.have.ownProperty('message')\r",
							"    pm.expect(responseJson.message).to.equals('Note successfully updated')\r",
							"})\r",
							"\r",
							"pm.test('when request updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId')\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if (!error) {\r",
							"            pm.test('then updated note should contain latest data', () => {\r",
							"                const responseJson = response.json()\r",
							"                const { data: { note } } = responseJson\r",
							"\r",
							"                const expectedTitle = 'Paranoid Android'\r",
							"                const expectedTag = [\"radiohead\", \"song\"]\r",
							"                const expectedBody = \"Why don't you remember my name?\"\r",
							"\r",
							"                pm.expect(note.title).to.equals(expectedTitle)\r",
							"                pm.expect(note.tags).to.eql(expectedTag)\r",
							"                pm.expect(note.body).to.equals(expectedBody)\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Paranoid Android\",\r\n    \"tags\": [\"radiohead\", \"song\"],\r\n    \"body\": \"Why don't you remember my name?\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[DELETE] Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code value is 200', () => {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('response Content-Type header value is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"})\r",
							"\r",
							"pm.test('response body is an object', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"    pm.expect(responseJson).to.be.an('object')\r",
							"})\r",
							"\r",
							"pm.test('response body have correct property & value', () => {\r",
							"    const responseJson = pm.response.json()\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status')\r",
							"    pm.expect(responseJson.status).to.equals('success')\r",
							"    pm.expect(responseJson).to.have.ownProperty('message')\r",
							"    pm.expect(responseJson.message).to.equals('Note successfully deleted')\r",
							"})\r",
							"\r",
							"pm.test('when request deleted note', () => {\r",
							"    const noteId = pm.environment.get('noteId')\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if (!error) {\r",
							"            pm.test('then deleted item is not found', () => {\r",
							"                pm.expect(response.code).to.equals(404)\r",
							"\r",
							"                const responseJson = response.json()\r",
							"                pm.expect(responseJson.status).to.equals('fail')\r",
							"                pm.expect(responseJson.message).to.equals(\"Sorry bro, I'm unable to find that note\")\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}